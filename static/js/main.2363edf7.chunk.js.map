{"version":3,"sources":["slider_scale_pos1.png","slider_scale_pos2.png","slider_scale_pos3.png","slider_scale_pos4.png","slider_scale_pos5.png","slider_scale_pos6.png","slider_scale_pos7.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","bgs","bg0","bg1","bg2","bg3","bg4","bg5","bg6","SliderContext","createContext","SliderContextProvider","props","_useState","useState","_useState2","Object","slicedToArray","sliderValue","setSliderValue","react_default","a","createElement","Provider","value","children","SliderBackground","_ref","index","visible","style","position","width","height","zIndex","backgroundSize","backgroundRepeat","backgroundPosition","backgroundImage","concat","Slider","_useContext","useContext","_useContext2","App_SliderBackground","padding","type","min","max","onChange","e","parseInt","currentTarget","class","Thumbnail","_useContext3","_props$range","range","THUMBNAILS","App_Thumbnail","App","App_SliderContextProvider","App_Slider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2363edf7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slider_scale_pos1.fb1db9bc.png\";","module.exports = __webpack_public_path__ + \"static/media/slider_scale_pos2.dd7484bf.png\";","module.exports = __webpack_public_path__ + \"static/media/slider_scale_pos3.38b63042.png\";","module.exports = __webpack_public_path__ + \"static/media/slider_scale_pos4.713211cb.png\";","module.exports = __webpack_public_path__ + \"static/media/slider_scale_pos5.ef9f08db.png\";","module.exports = __webpack_public_path__ + \"static/media/slider_scale_pos6.0eecc7ab.png\";","module.exports = __webpack_public_path__ + \"static/media/slider_scale_pos7.9528621a.png\";","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport bg0 from './slider_scale_pos1.png';\nimport bg1 from './slider_scale_pos2.png';\nimport bg2 from './slider_scale_pos3.png';\nimport bg3 from './slider_scale_pos4.png';\nimport bg4 from './slider_scale_pos5.png';\nimport bg5 from './slider_scale_pos6.png';\nimport bg6 from './slider_scale_pos7.png';\n\nconst bgs = [bg0, bg1, bg2, bg3, bg4, bg5, bg6];\n\nconst SliderContext = createContext([0, () => {}]);\n\nconst SliderContextProvider = props => {\n  const [sliderValue, setSliderValue] = useState(3);\n  return (\n    <SliderContext.Provider value={[sliderValue, setSliderValue]}>\n      {props.children}\n    </SliderContext.Provider>\n  );\n};\n\nconst App = () => {\n  return (\n    <div class=\"flex justify-center\">\n      <div class=\"m-3 max-w-md sm:w-auto md:w-md\">\n        <SliderContextProvider>\n          <Slider />\n          {THUMBNAILS}\n        </SliderContextProvider>\n      </div>\n    </div>\n  );\n};\n\nconst SliderBackground = ({ index, visible }) => (\n  <div\n    style={{\n      position: 'absolute',\n      width: visible ? '100%' : '1px',\n      height: visible ? '50px' : '1px',\n      zIndex: -1,\n      backgroundSize: 'contain',\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'center',\n      backgroundImage: `url(${bgs[index]})`,\n    }}\n  />\n);\n\nconst Slider = () => {\n  const [sliderValue, setSliderValue] = useContext(SliderContext);\n  return (\n    <div style={{ width: '100%', position: 'relative' }}>\n      <SliderBackground index={0} visible={sliderValue === 0} />\n      <SliderBackground index={1} visible={sliderValue === 1} />\n      <SliderBackground index={2} visible={sliderValue === 2} />\n      <SliderBackground index={3} visible={sliderValue === 3} />\n      <SliderBackground index={4} visible={sliderValue === 4} />\n      <SliderBackground index={5} visible={sliderValue === 5} />\n      <SliderBackground index={6} visible={sliderValue === 6} />\n      <input\n        style={{ height: '50px', padding: '0 10px' }}\n        type=\"range\"\n        min=\"0\"\n        max=\"6\"\n        value={sliderValue}\n        onChange={e => setSliderValue(parseInt(e.currentTarget.value, 10))}\n      />\n      <div class=\"flex justify-between ml-3 mr-3\">\n        <div>art</div>\n        <div>science</div>\n      </div>\n    </div>\n  );\n};\n\nconst Thumbnail = props => {\n  const [sliderValue] = useContext(SliderContext);\n\n  const [min, max] = props.range;\n  if (sliderValue < min || sliderValue > max) {\n    return null;\n  }\n\n  return <div>{props.children}</div>;\n};\n\nconst AboutTile = () => {\n  return (\n    <div class=\"max-w-md w-full lg:flex\">\n      <p class=\"text-grey-darker text-base\">\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n        quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n        nihil.\n      </p>\n    </div>\n  );\n};\n\nconst THUMBNAILS = [\n  <Thumbnail range={[0, 9]}>\n    <AboutTile />\n  </Thumbnail>,\n  <Thumbnail range={[0, 2]}>illustration</Thumbnail>,\n  <Thumbnail range={[2, 5]}>lil of both</Thumbnail>,\n  <Thumbnail range={[5, 6]}>science</Thumbnail>,\n];\n\n// const VisibleArea = () => {\n//   return <div class=\"m-5\">{THUMBNAILS}</div>;\n// };\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}