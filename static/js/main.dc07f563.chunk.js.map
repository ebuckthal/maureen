{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SliderContext","createContext","SliderContextProvider","props","_useState","useState","_useState2","Object","slicedToArray","sliderValue","setSliderValue","core_browser_esm","Provider","value","children","Slider","css","_templateObject","_useContext","useContext","_useContext2","type","min","max","onChange","e","parseInt","currentTarget","Thumbnail","_useContext3","_props$range","range","THUMBNAILS","App_Thumbnail","VisibleArea","App","App_SliderContextProvider","App_Slider","App_VisibleArea","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAKA,IAAMA,EAAgBC,wBAAc,CAAC,EAAG,eAElCC,EAAwB,SAAAC,GAAS,IAAAC,EACCC,mBAAS,GADVC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9BK,EAD8BH,EAAA,GACjBI,EADiBJ,EAAA,GAErC,OACEC,OAAAI,EAAA,EAAAJ,CAACP,EAAcY,SAAf,CAAwBC,MAAO,CAACJ,EAAaC,IAC1CP,EAAMW,WAkBPC,GAbQC,YAAHC,KAaI,WAAM,IAAAC,EACmBC,qBAAWnB,GAD9BoB,EAAAb,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GACZT,EADYW,EAAA,GACCV,EADDU,EAAA,GAEnB,OACEb,OAAAI,EAAA,EAAAJ,CAAA,WACEA,OAAAI,EAAA,EAAAJ,CAAA,SACEc,KAAK,QACLC,IAAI,IACJC,IAAI,IACJV,MAAOJ,EACPe,SAAU,SAAAC,GAAC,OAAIf,EAAegB,SAASD,EAAEE,cAAcd,MAAO,WAMhEe,EAAY,SAAAzB,GAAS,IAAA0B,EACHV,qBAAWnB,GAA1BS,EADkBF,OAAAC,EAAA,EAAAD,CAAAsB,EAAA,MAAAC,EAAAvB,OAAAC,EAAA,EAAAD,CAGNJ,EAAM4B,MAHA,GAGlBT,EAHkBQ,EAAA,GAGbP,EAHaO,EAAA,GAIzB,OAAIrB,EAAca,GAAOb,EAAcc,EAC9B,KAGFhB,OAAAI,EAAA,EAAAJ,CAAA,WAAMJ,EAAMW,WAGfkB,EAAa,CACjBzB,OAAAI,EAAA,EAAAJ,CAAC0B,EAAD,CAAWF,MAAO,CAAC,EAAG,IAAtB,gBACAxB,OAAAI,EAAA,EAAAJ,CAAC0B,EAAD,CAAWF,MAAO,CAAC,EAAG,IAAtB,eACAxB,OAAAI,EAAA,EAAAJ,CAAC0B,EAAD,CAAWF,MAAO,CAAC,EAAG,IAAtB,QACAxB,OAAAI,EAAA,EAAAJ,CAAC0B,EAAD,CAAWF,MAAO,CAAC,EAAG,IAAtB,YAGIG,EAAc,WAClB,OAAO3B,OAAAI,EAAA,EAAAJ,CAAA,WAAMyB,IAGAG,EA9CH,WACV,OACE5B,OAAAI,EAAA,EAAAJ,CAAC6B,EAAD,KACE7B,OAAAI,EAAA,EAAAJ,CAAC8B,EAAD,MACA9B,OAAAI,EAAA,EAAAJ,CAAC+B,EAAD,QCZcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc07f563.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nconst SliderContext = createContext([0, () => {}]);\n\nconst SliderContextProvider = props => {\n  const [sliderValue, setSliderValue] = useState(3);\n  return (\n    <SliderContext.Provider value={[sliderValue, setSliderValue]}>\n      {props.children}\n    </SliderContext.Provider>\n  );\n};\n\nconst style = css`\n  color: hotpink;\n`;\n\nconst App = () => {\n  return (\n    <SliderContextProvider>\n      <Slider />\n      <VisibleArea />\n    </SliderContextProvider>\n  );\n};\n\nconst Slider = () => {\n  const [sliderValue, setSliderValue] = useContext(SliderContext);\n  return (\n    <div>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"6\"\n        value={sliderValue}\n        onChange={e => setSliderValue(parseInt(e.currentTarget.value, 10))}\n      />\n    </div>\n  );\n};\n\nconst Thumbnail = props => {\n  const [sliderValue] = useContext(SliderContext);\n\n  const [min, max] = props.range;\n  if (sliderValue < min || sliderValue > max) {\n    return null;\n  }\n\n  return <div>{props.children}</div>;\n};\n\nconst THUMBNAILS = [\n  <Thumbnail range={[0, 2]}>illustration</Thumbnail>,\n  <Thumbnail range={[2, 5]}>lil of both</Thumbnail>,\n  <Thumbnail range={[3, 3]}>home</Thumbnail>,\n  <Thumbnail range={[5, 6]}>science</Thumbnail>,\n];\n\nconst VisibleArea = () => {\n  return <div>{THUMBNAILS}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}